{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","_ref","title","cases","total","active","isRed","props","Object","objectWithoutProperties","console","log","react_default","a","createElement","Card","onClick","className","concat","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","arguments","length","undefined","chartData","date","newDataPoint","x","y","push","LineGraph","_useState","useState","_useState2","slicedToArray","setData","useEffect","_ref2","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","then","response","json","stop","apply","this","fetchData","es","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","toConsumableArray","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","TileLayer","url","attribution","App","setInputCountry","_useState3","_useState4","setCountryInfo","_useState5","_useState6","setCountries","_useState7","_useState8","mapCountries","setMapCountries","_useState9","_useState10","tableData","setTableData","_useState11","_useState12","setCasesType","_useState13","lng","_useState14","mapCenter","setMapCenter","_useState15","_useState16","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","_callee2","e","countryCode","_context2","target","_x","FormControl","Select","variant","onChange","MenuItem","src_InfoBox","todayCases","todayRecovered","todayDeaths","src_Map_0","src_Table","src_LineGraph","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa3e6bb9.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n  console.log(title, active);\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType = \"cases\") => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map((country) => (\n        <tr>\n          <td>{country.country}</td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}